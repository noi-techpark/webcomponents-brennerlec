// SPDX-FileCopyrightText: 2025 NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Map } from "leaflet";
import { ViewLayout } from "./data/breakpoints";
import { WebcamInfoShort } from "./data/webcam/WebcamInfoShort";
export { Map } from "leaflet";
export { ViewLayout } from "./data/breakpoints";
export { WebcamInfoShort } from "./data/webcam/WebcamInfoShort";
export namespace Components {
    interface NoiBackdrop {
        "hidden": boolean;
    }
    interface NoiBrennerlecMap {
    }
    interface NoiButton {
        "disabled": boolean;
        "iconOnly": boolean;
    }
    interface NoiIcon {
        "name": string;
    }
    interface NoiInput {
        "placeholder": string;
    }
    interface NoiRoadWebcam {
        "language": string;
        "layout": ViewLayout;
    }
    interface NoiRoadWebcamList {
        "idSelected": string;
        "layout": ViewLayout;
        "webcamArr": WebcamInfoShort[] | null;
    }
}
export interface NoiBackdropCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoiBackdropElement;
}
export interface NoiBrennerlecMapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoiBrennerlecMapElement;
}
export interface NoiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoiButtonElement;
}
export interface NoiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoiInputElement;
}
export interface NoiRoadWebcamListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNoiRoadWebcamListElement;
}
declare global {
    interface HTMLNoiBackdropElementEventMap {
        "backdropClick": void;
    }
    interface HTMLNoiBackdropElement extends Components.NoiBackdrop, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoiBackdropElementEventMap>(type: K, listener: (this: HTMLNoiBackdropElement, ev: NoiBackdropCustomEvent<HTMLNoiBackdropElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoiBackdropElementEventMap>(type: K, listener: (this: HTMLNoiBackdropElement, ev: NoiBackdropCustomEvent<HTMLNoiBackdropElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoiBackdropElement: {
        prototype: HTMLNoiBackdropElement;
        new (): HTMLNoiBackdropElement;
    };
    interface HTMLNoiBrennerlecMapElementEventMap {
        "mapReady": Map;
    }
    interface HTMLNoiBrennerlecMapElement extends Components.NoiBrennerlecMap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoiBrennerlecMapElementEventMap>(type: K, listener: (this: HTMLNoiBrennerlecMapElement, ev: NoiBrennerlecMapCustomEvent<HTMLNoiBrennerlecMapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoiBrennerlecMapElementEventMap>(type: K, listener: (this: HTMLNoiBrennerlecMapElement, ev: NoiBrennerlecMapCustomEvent<HTMLNoiBrennerlecMapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoiBrennerlecMapElement: {
        prototype: HTMLNoiBrennerlecMapElement;
        new (): HTMLNoiBrennerlecMapElement;
    };
    interface HTMLNoiButtonElementEventMap {
        "btnClick": MouseEvent;
    }
    interface HTMLNoiButtonElement extends Components.NoiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoiButtonElementEventMap>(type: K, listener: (this: HTMLNoiButtonElement, ev: NoiButtonCustomEvent<HTMLNoiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoiButtonElementEventMap>(type: K, listener: (this: HTMLNoiButtonElement, ev: NoiButtonCustomEvent<HTMLNoiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoiButtonElement: {
        prototype: HTMLNoiButtonElement;
        new (): HTMLNoiButtonElement;
    };
    interface HTMLNoiIconElement extends Components.NoiIcon, HTMLStencilElement {
    }
    var HTMLNoiIconElement: {
        prototype: HTMLNoiIconElement;
        new (): HTMLNoiIconElement;
    };
    interface HTMLNoiInputElementEventMap {
        "valueChange": string;
    }
    interface HTMLNoiInputElement extends Components.NoiInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoiInputElementEventMap>(type: K, listener: (this: HTMLNoiInputElement, ev: NoiInputCustomEvent<HTMLNoiInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoiInputElementEventMap>(type: K, listener: (this: HTMLNoiInputElement, ev: NoiInputCustomEvent<HTMLNoiInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoiInputElement: {
        prototype: HTMLNoiInputElement;
        new (): HTMLNoiInputElement;
    };
    interface HTMLNoiRoadWebcamElement extends Components.NoiRoadWebcam, HTMLStencilElement {
    }
    var HTMLNoiRoadWebcamElement: {
        prototype: HTMLNoiRoadWebcamElement;
        new (): HTMLNoiRoadWebcamElement;
    };
    interface HTMLNoiRoadWebcamListElementEventMap {
        "itemClick": WebcamInfoShort;
    }
    interface HTMLNoiRoadWebcamListElement extends Components.NoiRoadWebcamList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNoiRoadWebcamListElementEventMap>(type: K, listener: (this: HTMLNoiRoadWebcamListElement, ev: NoiRoadWebcamListCustomEvent<HTMLNoiRoadWebcamListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNoiRoadWebcamListElementEventMap>(type: K, listener: (this: HTMLNoiRoadWebcamListElement, ev: NoiRoadWebcamListCustomEvent<HTMLNoiRoadWebcamListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNoiRoadWebcamListElement: {
        prototype: HTMLNoiRoadWebcamListElement;
        new (): HTMLNoiRoadWebcamListElement;
    };
    interface HTMLElementTagNameMap {
        "noi-backdrop": HTMLNoiBackdropElement;
        "noi-brennerlec-map": HTMLNoiBrennerlecMapElement;
        "noi-button": HTMLNoiButtonElement;
        "noi-icon": HTMLNoiIconElement;
        "noi-input": HTMLNoiInputElement;
        "noi-road-webcam": HTMLNoiRoadWebcamElement;
        "noi-road-webcam-list": HTMLNoiRoadWebcamListElement;
    }
}
declare namespace LocalJSX {
    interface NoiBackdrop {
        "hidden"?: boolean;
        "onBackdropClick"?: (event: NoiBackdropCustomEvent<void>) => void;
    }
    interface NoiBrennerlecMap {
        "onMapReady"?: (event: NoiBrennerlecMapCustomEvent<Map>) => void;
    }
    interface NoiButton {
        "disabled"?: boolean;
        "iconOnly"?: boolean;
        "onBtnClick"?: (event: NoiButtonCustomEvent<MouseEvent>) => void;
    }
    interface NoiIcon {
        "name"?: string;
    }
    interface NoiInput {
        "onValueChange"?: (event: NoiInputCustomEvent<string>) => void;
        "placeholder"?: string;
    }
    interface NoiRoadWebcam {
        "language"?: string;
        "layout"?: ViewLayout;
    }
    interface NoiRoadWebcamList {
        "idSelected"?: string;
        "layout"?: ViewLayout;
        "onItemClick"?: (event: NoiRoadWebcamListCustomEvent<WebcamInfoShort>) => void;
        "webcamArr"?: WebcamInfoShort[] | null;
    }
    interface IntrinsicElements {
        "noi-backdrop": NoiBackdrop;
        "noi-brennerlec-map": NoiBrennerlecMap;
        "noi-button": NoiButton;
        "noi-icon": NoiIcon;
        "noi-input": NoiInput;
        "noi-road-webcam": NoiRoadWebcam;
        "noi-road-webcam-list": NoiRoadWebcamList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "noi-backdrop": LocalJSX.NoiBackdrop & JSXBase.HTMLAttributes<HTMLNoiBackdropElement>;
            "noi-brennerlec-map": LocalJSX.NoiBrennerlecMap & JSXBase.HTMLAttributes<HTMLNoiBrennerlecMapElement>;
            "noi-button": LocalJSX.NoiButton & JSXBase.HTMLAttributes<HTMLNoiButtonElement>;
            "noi-icon": LocalJSX.NoiIcon & JSXBase.HTMLAttributes<HTMLNoiIconElement>;
            "noi-input": LocalJSX.NoiInput & JSXBase.HTMLAttributes<HTMLNoiInputElement>;
            "noi-road-webcam": LocalJSX.NoiRoadWebcam & JSXBase.HTMLAttributes<HTMLNoiRoadWebcamElement>;
            "noi-road-webcam-list": LocalJSX.NoiRoadWebcamList & JSXBase.HTMLAttributes<HTMLNoiRoadWebcamListElement>;
        }
    }
}
